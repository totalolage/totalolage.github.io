---
import type { AstroVNode } from "astro/jsx-runtime";
import { parse as parseSvg, type ElementNode } from "svg-parser";

export interface Props {
  className?: string | undefined;
  color: string | undefined;
  href?: string | undefined;
  label: string | undefined;
  logo?: string | undefined;
  logoColor?: string | undefined;
  message?: string | undefined;
  printContent?: AstroVNode | undefined;
  variant?:
    | "plastic"
    | "flat"
    | "flat-square"
    | "for-the-badge"
    | "social"
    | undefined;
}

const {
  className,
  color,
  href,
  label,
  logo,
  logoColor,
  message,
  printContent,
  variant,
} = Astro.props;

const badgeUrl = new URL(
  `https://img.shields.io/badge/${[label, message, color]
    .filter(Boolean)
    .map(encodeURIComponent)
    .join("-")}`,
);

if (variant) badgeUrl.searchParams.set("style", variant);
if (logo) badgeUrl.searchParams.set("logo", logo);
if (logoColor) badgeUrl.searchParams.set("logoColor", logoColor);

const response = await fetch(badgeUrl.toString());
const img = await response.blob();

const asUintArray = new Uint8Array(await img.arrayBuffer());
const asBuffer = Buffer.from(asUintArray);

const svgRoot = parseSvg(asBuffer.toString());
const svgProperties = svgRoot.children.find(
  (child): child is ElementNode =>
    child.type === "element" && child.tagName === "svg",
)?.properties;
const width = svgProperties?.width;
const height = svgProperties?.height;

const base64 = asBuffer.toString("base64");
const badgeSrc = `data:${img.type};base64,${base64}`;

const badgeClassList = ["print:hidden", className];
const textClassList = ["screen:sr-only", className];

const imgProps = {
  src: badgeSrc,
  alt: label,
  width,
  height,
};
---

<>
  {
    href ? (
      <a href={href} class:list={badgeClassList}>
        <img {...imgProps} />
      </a>
    ) : (
      <img {...imgProps} class:list={badgeClassList} />
    )
  }
  <span class:list={textClassList}>
    {printContent ?? label}
  </span>
</>
